package cats;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class HouseTests {

    private House house;

    @Before
    public void setUp(){
        House house=new House("RedHouse", 2);
    }

    @Test(expected = NullPointerException.class)
    public void testSetNameShouldFailWhenNameIsNull(){
        House house=new House(null,  3);
    }
    @Test(expected = NullPointerException.class)
    public void testSetNameShouldFailWhenNameIsEmpty(){
        House house=new House(" ",  3);
    }

    @Test
    public void testGetName(){
        House house1=new House("WhiteHouse", 1);
        Assert.assertEquals("WhiteHouse", house1.getName());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSetCapacity(){
        House house=new House("GreenHouse", -1);
    }

    @Test
    public void testGetCapacity(){
        House house=new House("Blue", 5);
        Assert.assertEquals(5, house.getCapacity());
    }

    @Test
    public void testAddCatInHouse(){
        Cat cat=new Cat("Utaa");
        Cat cat1=new Cat("Exan");
        Cat cat2=new Cat("Bella");
        House house=new House("Black", 3);
        house.addCat(cat);
        house.addCat(cat1);
        house.addCat(cat2);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddCatWhenHouseIsFull(){
        Cat cat=new Cat("Utaa");
        Cat cat1=new Cat("Exan");
        Cat cat2=new Cat("Bella");
        House house=new House("Black", 2);
        house.addCat(cat);
        house.addCat(cat1);
        house.addCat(cat2);
    }

    @Test
    public void testRemoveCat(){
        Cat cat=new Cat("Utaa");
        Cat cat1=new Cat("Exan");
        Cat cat2=new Cat("Bella");
        House house=new House("Black", 3);
        house.addCat(cat);
        house.addCat(cat1);
        house.addCat(cat2);
        house.removeCat(cat.getName());
        house.removeCat(cat2.getName());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCatToRemoveShouldFailWhenCatIsNull(){

        House house=new House("Black", 1);

        house.removeCat("Other_cat");
    }

    @Test
    public void testCatForSaleIfSaleCat(){
        House house=new House("Black", 3);
        Cat cat=new Cat("Mimi");
        house.addCat(cat);
        Cat returnCat=house.catForSale(cat.getName());
        Assert.assertFalse(returnCat.isHungry());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testCatForSaleWhenCatWithGivenNameDoesNotExist(){
        House house=new House("Black", 3);
        Cat mimi=new Cat("Mimi");
        house.addCat(mimi);
        Cat returnCat=house.catForSale("Bobbi");
        Assert.assertTrue(returnCat.isHungry());
    }

    @Test
    public void testGetStatistics(){
        Cat cat=new Cat("Utaa");
        Cat cat1=new Cat("Exan");
        Cat cat2=new Cat("Bella");
        House house=new House("Black", 9);
        house.addCat(cat);
        house.addCat(cat1);
        house.addCat(cat2);
        Assert.assertEquals("The cat Utaa, Exan, Bella is in the house Black!", house.statistics());
    }

}
