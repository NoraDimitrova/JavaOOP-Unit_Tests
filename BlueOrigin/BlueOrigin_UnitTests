package blueOrigin;

import java.util.ArrayList;
import java.util.Collection;

public class Spaceship {
    private static final String INVALID_SPACESHIP_NAME = "Invalid spaceship name!";
    private static final String INVALID_CAPACITY = "Invalid capacity!";
    private static final String SPACESHIP_FULL = "Spaceship is full!";
    private static final String ASTRONAUT_EXIST = "Astronaut %s is already in!";
    private static final int ZERO_CAPACITY = 0;

    private int capacity;
    private String name;
    private Collection<Astronaut> astronauts;

    public Spaceship(String name, int capacity) {
        this.setName(name);
        this.setCapacity(capacity);
        this.astronauts = new ArrayList<>();
    }

    public int getCount() {
        return this.astronauts.size();
    }

    public String getName() {
        return this.name;
    }

    public int getCapacity() {
        return this.capacity;
    }

    public void add(Astronaut astronaut) {
        if (astronauts.size() == this.getCapacity()) {
            throw new IllegalArgumentException(SPACESHIP_FULL);
        }

        boolean astronautExists = this.astronauts
                .stream()
                .anyMatch(a -> a.getName().equals(astronaut.getName()));

        if (astronautExists) {
            throw new IllegalArgumentException(String.format(ASTRONAUT_EXIST, astronaut.getName()));
        }

        this.astronauts.add(astronaut);
    }

    public boolean remove(String astronautName) {
        Astronaut astronaut = this.astronauts
                .stream()
                .filter(a -> a.getName().equals(astronautName))
                .findFirst()
                .orElse(null);

        boolean isRemove = this.astronauts.remove(astronaut);
        return isRemove;
    }

    private void setCapacity(int capacity) {
        if (capacity < ZERO_CAPACITY) {
            throw new IllegalArgumentException(INVALID_CAPACITY);
        }

        this.capacity = capacity;
    }

    private void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new NullPointerException(INVALID_SPACESHIP_NAME);
        }

        this.name = name;
    }
}

//Unit Tests

package blueOrigin;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class SpaceshipTests {
    private Spaceship spaceship;

    @Before
    public void setUp() {
        this.spaceship = new Spaceship("Dobri", 5);
    }

    @Test(expected = NullPointerException.class)
    public void testSetNameShouldFailWhenNameIsNull() {
        Spaceship spaceship = new Spaceship(null, 10);
    }

    @Test(expected = NullPointerException.class)
    public void testSetNameShouldFailWhenNameIsTrim() {
        Spaceship spaceship = new Spaceship(" ", 10);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSetCapacitShuoldyFailWhenBellowZeroCapacity() {
        Spaceship spaceship = new Spaceship("name", -1);
    }

    @Test
    public void testGetAstronautsShouldReturnTwoWhenAddedTwo() {
        Astronaut astronaut = new Astronaut("Dobri", 100);
        Astronaut astronaut1 = new Astronaut("Miro", 100);
        spaceship.add(astronaut);
        spaceship.add(astronaut1);
        Assert.assertEquals(2, spaceship.getCount());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testIfFailWhenAstronautExists() {
        Astronaut astronaut = new Astronaut("Dobri", 100);
        spaceship.add(astronaut);
        spaceship.add(astronaut);
    }

    @Test
    public void testWhenSpaceshipIsEmpty() {
        Assert.assertEquals(0, spaceship.getCount());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testAddAstronautsShouldFailWhenSpaceshipIsFull() {
        Spaceship spaceship = new Spaceship("Spaceship", 1);
        Astronaut astronaut = new Astronaut("Dobri", 100);
        Astronaut astronaut1 = new Astronaut("Miro", 100);
        spaceship.add(astronaut);
        spaceship.add(astronaut1);
    }


    @Test
    public void testGetName() {
        Assert.assertEquals("Dobri", spaceship.getName());
    }

    @Test
    public void testIfRemove(){
        Astronaut astronaut = new Astronaut("Dobri", 100);
        Astronaut astronaut1 = new Astronaut("Miro", 100);
        spaceship.add(astronaut);
        spaceship.add(astronaut1);
        spaceship.remove(astronaut.getName());
        spaceship.remove(astronaut1.getName());
    }


    @Test
    public void testRemoveAstronautShouldReturnTrueWhenSuchAdded(){
        Astronaut astronaut = new Astronaut("Dobri", 100);
        spaceship.add(astronaut);
        Assert.assertTrue(spaceship.remove(astronaut.getName()));
    }

    @Test
    public void testRemoveAstronautShouldReturnFalseWhenSuchAdded(){
        Astronaut astronaut = new Astronaut("Dobri", 100);
        spaceship.add(astronaut);
        Assert.assertFalse(spaceship.remove("other_name"));
    }
}

